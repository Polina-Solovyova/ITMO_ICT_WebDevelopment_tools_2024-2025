{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"leetcode/leetcode/","title":"\u041b\u0438\u0442\u043a\u043e\u0434\u044b","text":""},{"location":"leetcode/leetcode/#leetcode","title":"Leetcode","text":""},{"location":"leetcode/leetcode/#27-remove-element","title":"27. Remove Element","text":"<p>Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.</p> <p>Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:</p> <p>Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums. Return k. Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <p>int[] nums = [...]; // Input array int val = ...; // Value to remove int[] expectedNums = [...]; // The expected answer with correct length.                             // It is sorted with no values equaling val.</p> <p>int k = removeElement(nums, val); // Calls your implementation</p> <p>assert k == expectedNums.length; sort(nums, 0, k); // Sort the first k elements of nums for (int i = 0; i &lt; actualLength; i++) {     assert nums[i] == expectedNums[i]; } If all assertions pass, then your solution will be accepted.</p> <p>Example 1:</p> <p>Input: nums = [3,2,2,3], val = 3 Output: 2, nums = [2,2,,] Explanation: Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2:</p> <p>Input: nums = [0,1,2,2,3,0,4,2], val = 2 Output: 5, nums = [0,1,4,0,3,,,_] Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4. Note that the five elements can be returned in any order. It does not matter what you leave beyond the returned k (hence they are underscores).</p> <p>Constraints:</p> <p>0 &lt;= nums.length &lt;= 100 0 &lt;= nums[i] &lt;= 50 0 &lt;= val &lt;= 100</p>"},{"location":"leetcode/leetcode/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def removeElement(self, nums: List[int], val: int) -&gt; int:\n        count = 0\n        for i in range(len(nums))[::-1]:\n            if nums[i] == val:\n                nums.pop(i)\n                nums.append('_')\n                count += 1\n        return len(nums)-count        \n\n</code></pre>"},{"location":"leetcode/leetcode/#88-merge-sorted-array","title":"88. Merge Sorted Array","text":"<p>You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.</p> <p>Merge nums1 and nums2 into a single array sorted in non-decreasing order.</p> <p>The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.</p> <p>Example 1:</p> <p>Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1. Example 2:</p> <p>Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The arrays we are merging are [1] and []. The result of the merge is [1]. Example 3:</p> <p>Input: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.</p> <p>Constraints:</p> <p>nums1.length == m + n nums2.length == n 0 &lt;= m, n &lt;= 200 1 &lt;= m + n &lt;= 200 -109 &lt;= nums1[i], nums2[j] &lt;= 109</p>"},{"location":"leetcode/leetcode/#solution_1","title":"Solution","text":"<pre><code>class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&gt; None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        del nums1[m:m+n]\n        for i in range(n):\n            k=0\n            while k in range (len(nums1)) and nums1[k] &lt; nums2[i]:\n                k+=1\n            nums1.insert(k, nums2[i])\n\n</code></pre>"},{"location":"leetcode/leetcode/#238-product-of-array-except-self","title":"238. Product of Array Except Self","text":"<p>Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].</p> <p>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in O(n) time and without using the division operation.</p> <p>Example 1:</p> <p>Input: nums = [1,2,3,4] Output: [24,12,8,6]</p> <p>Example 2:</p> <p>Input: nums = [-1,1,0,-3,3] Output: [0,0,9,0,0]</p> <p>Constraints:</p> <p>2 &lt;= nums.length &lt;= 105 -30 &lt;= nums[i] &lt;= 30 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p>"},{"location":"leetcode/leetcode/#solution_2","title":"Solution","text":"<pre><code>class Solution:\n    def productExceptSelf(self, nums: List[int]) -&gt; List[int]:\n        n = len(nums)\n        answer = [1] * n\n\n        left_product = 1\n        for i in range(n):\n            answer[i] = left_product\n            left_product *= nums[i]\n\n        right_product = 1\n        for i in range(n - 1, -1, -1):\n            answer[i] *= right_product\n            right_product *= nums[i]\n\n        return answer\n</code></pre>"},{"location":"leetcode/leetcode/#238-product-of-array-except-self_1","title":"238. Product of Array Except Self","text":"<p>Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].</p> <p>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in O(n) time and without using the division operation.</p> <p>Example 1:</p> <p>Input: nums = [1,2,3,4] Output: [24,12,8,6]</p> <p>Example 2:</p> <p>Input: nums = [-1,1,0,-3,3] Output: [0,0,9,0,0]</p> <p>Constraints:</p> <p>2 &lt;= nums.length &lt;= 105 -30 &lt;= nums[i] &lt;= 30 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p>"},{"location":"leetcode/leetcode/#solution_3","title":"Solution","text":"<pre><code>class RandomizedSet:\n    def __init__(self):\n        self.val_to_index = {}\n        self.values = []\n\n    def insert(self, val: int) -&gt; bool:\n        if val in self.val_to_index:\n            return False\n        self.val_to_index[val] = len(self.values)\n        self.values.append(val)\n        return True\n\n    def remove(self, val: int) -&gt; bool:\n        if val not in self.val_to_index:\n            return False\n        index = self.val_to_index[val]\n        last_val = self.values[-1]\n        self.values[index] = last_val\n        self.val_to_index[last_val] = index\n        self.values.pop()\n        del self.val_to_index[val]\n        return True\n\n    def getRandom(self) -&gt; int:\n        return random.choice(self.values)\n</code></pre>"},{"location":"leetcode/leetcode/#274-h-index","title":"274. H-Index","text":"<p>Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.</p> <p>According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.</p> <p>Example 1:</p> <p>Input: citations = [3,0,6,1,5] Output: 3 Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3. Example 2:</p> <p>Input: citations = [1,3,1] Output: 1</p>"},{"location":"leetcode/leetcode/#solution_4","title":"Solution","text":"<pre><code>class Solution:\n    def hIndex(self, citations: List[int]) -&gt; int:\n        citations.sort(reverse=True)  \n        h_index = 0\n        for i, citation in enumerate(citations):\n            if citation &gt;= i + 1:\n                h_index = i + 1\n            else:\n                break\n        return h_index\n</code></pre>"},{"location":"leetcode/leetcode/#55-jump-game","title":"55. Jump Game","text":"<p>You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.</p> <p>Return true if you can reach the last index, or false otherwise.</p> <p>Example 1:</p> <p>Input: nums = [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2:</p> <p>Input: nums = [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</p> <p>Constraints:</p> <p>1 &lt;= nums.length &lt;= 104 0 &lt;= nums[i] &lt;= 105</p>"},{"location":"leetcode/leetcode/#solution_5","title":"Solution","text":"<pre><code>class Solution:\n    def canJump(self, nums: List[int]) -&gt; bool:\n        max_reach = 0\n        for i, jump in enumerate(nums):\n            if i &gt; max_reach:\n                return False\n            max_reach = max(max_reach, i + jump)\n            if max_reach &gt;= len(nums) - 1:\n                return True\n        return False\n</code></pre>"},{"location":"leetcode/leetcode/#122-best-time-to-buy-and-sell-stock-ii","title":"122. Best Time to Buy and Sell Stock II","text":"<p>You are given an integer array prices where prices[i] is the price of a given stock on the ith day.</p> <p>On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p> <p>Find and return the maximum profit you can achieve.</p> <p>Example 1:</p> <p>Input: prices = [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. Example 2:</p> <p>Input: prices = [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4. Example 3:</p> <p>Input: prices = [7,6,4,3,1] Output: 0 Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.</p> <p>Constraints:</p> <p>1 &lt;= prices.length &lt;= 3 * 104 0 &lt;= prices[i] &lt;= 104</p>"},{"location":"leetcode/leetcode/#solution_6","title":"Solution","text":"<pre><code>class Solution:\n    def maxProfit(self, prices: List[int]) -&gt; int:\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] &gt; prices[i - 1]:\n                max_profit += prices[i] - prices[i - 1]\n        return max_profit\n</code></pre>"},{"location":"lr1/lab/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI","text":"<p>\u0422\u0435\u043c\u0430: \u0412\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438</p> <p>\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c SQLModel/SQLAlchemy, Alembic-\u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439, JWT-\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0432\u044f\u0437\u044f\u043c\u0438.</p>"},{"location":"lr1/lab/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","text":"<p>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f (core/config.py)</p> <pre><code>import os\nfrom pydantic_settings import BaseSettings\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n\nclass Settings(BaseSettings):\n    DATABASE_URL: str = os.getenv(\"DATABASE_URL\", \"postgresql://postgres:2548@localhost:5432/book_exchange\")\n    SECRET_KEY: str = os.getenv(\"SECRET_KEY\", \"supersecretkey\")\n    ALGORITHM: str = \"HS256\"\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24\n\n\nsettings = Settings()\n</code></pre> <p>\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (core/database.py)</p> <pre><code>from sqlalchemy.orm import sessionmaker\nfrom sqlmodel import SQLModel, create_engine, Session\nfrom app.core.config import settings\n\nengine = create_engine(settings.DATABASE_URL, echo=True, future=True)\n\nSessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\ndef init_db():\n    import app.models.user\n    import app.models.book\n    import app.models.exchange_request\n    import app.models.user_book\n    import app.models.exchange_status_history\n    SQLModel.metadata.create_all(engine)\n</code></pre> <p>\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c (core/security.py)</p> <pre><code>from passlib.context import CryptContext\nfrom jose import JWTError, jwt\nfrom datetime import datetime, timedelta\nfrom app.core.config import settings\nfrom typing import Optional\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n\ndef verify_password(plain_password: str, hashed_password: str) -&gt; bool:\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password: str) -&gt; str:\n    return pwd_context.hash(password)\n\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -&gt; str:\n    to_encode = data.copy()\n    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES))\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)\n    return encoded_jwt\n\n\ndef decode_access_token(token: str):\n    try:\n        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])\n        return payload\n    except JWTError:\n        return None\n</code></pre> <p>\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430</p> <pre><code>router = APIRouter()\n\n@router.post(\"/register\", response_model=UserRead)\ndef register(user_in: UserCreate, db: Session = Depends(get_db)):\n    if get_user_by_username(db, user_in.username):\n        raise HTTPException(status_code=400, detail=\"Username already registered\")\n    if get_user_by_email(db, user_in.email):\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    user = create_user(db, user_in)\n    return user\n\n\n@router.post(\"/login\", response_model=Token)\ndef login(login_data: UserLogin, db: Session = Depends(get_db)):\n    user = get_user_by_email(db, login_data.email)\n    if not user or not verify_password(login_data.password, user.hashed_password):\n        raise HTTPException(status_code=401, detail=\"Incorrect email or password\")\n    access_token = create_access_token(data={\"sub\": user.email})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n</code></pre>"},{"location":"lr1/lab/#_2","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438</p> <ol> <li> <p>User \u2014 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p> </li> <li> <p>Book \u2014 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043d\u0438\u0433\u0435 (title, author, genre, \u2026)</p> </li> <li> <p>ExchangeRequest \u2014 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d</p> </li> <li> <p>ExchangeStatusHistory \u2014 \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u0431\u043c\u0435\u043d\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439</p> </li> </ol>"},{"location":"lr1/lab/#crud-","title":"CRUD-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b","text":"<p>\u041a\u043d\u0438\u0433\u0438</p> <pre><code>GET /books/ \u2014 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043a\u043d\u0438\u0433\nPOST /books/ \u2014 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 (\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438)\nGET /books/{book_id} \u2014 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043d\u0438\u0433\u0435\nPUT /books/{book_id} \u2014 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 (\u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446)\nDELETE /books/{book_id} - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 (\u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446)\n\n</code></pre> <p>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438</p> <pre><code>POST /books/ \u2014 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0432 \u0441\u0432\u043e\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443\nGET /books/ \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438 title, author, tag_id\nGET /books/{id} \u2014 \u043f\u043e id\nPATCH /books/{id} \u2014 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0430\u0442\u044b\nDELETE /books/{id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d</p> <pre><code>POST /exchanges/ \u2014 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\nGET /exchanges/ - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0431\u043c\u0435\u043d\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\nGET /exchanges/incoming \u2014 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435\nGET /exchanges/outgoing \u2014 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435\nPATCH /exchanges/{exchange_id}/status \u2014 \u043f\u0440\u0438\u043d\u044f\u0442\u044c/\u043e\u0442\u043a\u043b\u043e\u043d\u0438\u0442\u044c\nGET /exchanges/{exchange_id}/history \u2014 \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u0431\u043c\u0435\u043d\u043e\u0432\n</code></pre> <p>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438</p> <pre><code>GET /users/me \u2014 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c\nGET /users/ \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439\nGET /users/{user_id}/books - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n</code></pre>"},{"location":"lr1/lab/#alembic","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 Alembic","text":"<p>\u0412 alembic/env.py \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e:</p> <pre><code>from sqlmodel import SQLModel\nfrom app.models.models import *\ntarget_metadata = SQLModel.metadata \n</code></pre>"},{"location":"lr1/practice_1/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.1 \u2014 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 FastAPI","text":""},{"location":"lr1/practice_1/#_1","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>Warrior</p> <pre><code>class Warrior(BaseModel):\n    id: int\n    race: RaceType\n    name: str\n    level: int\n    profession: Profession\n    skills: Optional[List[Skill]] = []\n</code></pre> <p>Profession </p> <pre><code>class Profession(BaseModel):\n    id: int\n    title: str\n    description: str\n</code></pre> <p>Skill </p> <pre><code>class Skill(BaseModel):\n    id: int\n    name: str\n    description: str\n</code></pre> <p>RaceType</p> <pre><code>class RaceType(str, Enum):\n    director = \"director\"\n    worker   = \"worker\"\n    junior   = \"junior\"\n</code></pre>"},{"location":"lr1/practice_1/#api-endpoints","title":"API Endpoints","text":"<p>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430\u043c\u0438</p> <pre><code>GET /warriors_list - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0438\u043d\u043e\u0432\nGET /warrior/{warrior_id} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0432\u043e\u0438\u043d\u0435\nPOST /warrior - \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0432\u043e\u0438\u043d\u0430\nPUT /warrior{warrior_id} - \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u043e\u0438\u043d\u0435\nDELETE /warrior/delete{warrior_id} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u043e\u0438\u043d\u0430\n</code></pre> <p>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u043c\u0438</p> <pre><code>GET /professions - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439\nGET /profession/{profession_id} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438\nPOST /profession - \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e\nPUT /profession/{profession_id} - \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438\nDELETE /profession/{profession_id} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e\n</code></pre>"},{"location":"lr1/practice_1/#_2","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434","text":"<p>main.py</p> <pre><code>from fastapi import FastAPI, HTTPException\nfrom typing import List\nfrom models import Warrior, Profession, Skill, RaceType\napp = FastAPI()\ntemp_warriors = [\n{\n    \"id\": 1,\n    \"race\": RaceType.director,\n    \"name\": \"\u041c\u0430\u0440\u0442\u044b\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439\",\n    \"level\": 12,\n    \"profession\": {\n        \"id\": 1,\n        \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\",\n        \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\"\n    },\n    \"skills\":\n        [{\n            \"id\": 1,\n            \"name\": \"\u041a\u0443\u043f\u043b\u0435-\u043f\u0440\u043e\u0434\u0430\u0436\u0430 \u043a\u043e\u043c\u043f\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432\",\n            \"description\": \"\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\",\n            \"description\": \"\"\n        }]\n},\n{\n    \"id\": 2,\n    \"race\": RaceType.worker,\n    \"name\": \"\u0410\u043d\u0434\u0440\u0435\u0439 \u041a\u043e\u0441\u044f\u043a\u0438\u043d\",\n    \"level\": 12,\n    \"profession\": {\n        \"id\": 1,\n        \"title\": \"\u0414\u0435\u043b\u044c\u0444\u0438\u0441\u0442-\u0433\u0440\u0435\u0431\u0435\u0446\",\n        \"description\": \"\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\"\n    },\n    \"skills\": []\n},\n]\ntemp_professions = [\n    {\"id\": 1, \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\", \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\"},\n    {\"id\": 2, \"title\": \"\u0414\u0435\u043b\u044c\u0444\u0438\u0441\u0442-\u0433\u0440\u0435\u0431\u0435\u0446\", \"description\": \"\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\"},\n]\n@app.get(\"/warriors_list\", response_model=List[Warrior])\ndef warriors_list():\n    return temp_warriors\n@app.get(\"/warrior/{warrior_id}\", response_model=Warrior)\ndef warrior_get(warrior_id: int):\n    for w in temp_warriors:\n        if w[\"id\"] == warrior_id:\n            return w\n    raise HTTPException(status_code=404, detail=\"Warrior not found\")\n@app.post(\"/warrior\", response_model=Warrior, status_code=201)\ndef warrior_create(warrior: Warrior):\n    temp_warriors.append(warrior.dict())\n    return warrior\n@app.put(\"/warrior/{warrior_id}\", response_model=Warrior)\ndef warrior_update(warrior_id: int, warrior: Warrior):\n    for idx, w in enumerate(temp_warriors):\n        if w[\"id\"] == warrior_id:\n            temp_warriors[idx] = warrior.dict()\n            return warrior\n    raise HTTPException(status_code=404, detail=\"Warrior not found\")\n@app.delete(\"/warrior/{warrior_id}\", status_code=204)\ndef warrior_delete(warrior_id: int):\n    for idx, w in enumerate(temp_warriors):\n        if w[\"id\"] == warrior_id:\n            temp_warriors.pop(idx)\n            return\n    raise HTTPException(status_code=404, detail=\"Warrior not found\")\n@app.get(\"/professions\", response_model=List[Profession])\ndef professions_list():\n    return temp_professions\n@app.get(\"/profession/{prof_id}\", response_model=Profession)\ndef profession_get(prof_id: int):\n    for p in temp_professions:\n        if p[\"id\"] == prof_id:\n            return p\n    raise HTTPException(status_code=404, detail=\"Profession not found\")\n@app.post(\"/profession\", response_model=Profession, status_code=201)\ndef profession_create(prof: Profession):\n    temp_professions.append(prof.dict())\n    return prof\n@app.put(\"/profession/{prof_id}\", response_model=Profession)\ndef profession_update(prof_id: int, prof: Profession):\n    for idx, p in enumerate(temp_professions):\n        if p[\"id\"] == prof_id:\n            temp_professions[idx] = prof.dict()\n            return prof\n    raise HTTPException(status_code=404, detail=\"Profession not found\")\n@app.delete(\"/profession/{prof_id}\", status_code=204)\ndef profession_delete(prof_id: int):\n    for idx, p in enumerate(temp_professions):\n        if p[\"id\"] == prof_id:\n            temp_professions.pop(idx)\n            return\n    raise HTTPException(status_code=404, detail=\"Profession not found\")\n</code></pre>"},{"location":"lr1/practice_2/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.2 \u2014 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0411\u0414, SQLModel \u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 Alembic","text":""},{"location":"lr1/practice_2/#connectionpy","title":"connection.py \u2014 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414","text":"<pre><code>from sqlmodel import SQLModel, Session, create_engine\ndb_url = 'postgresql://postgres:galactus@localhost/warriors_db'\nengine = create_engine(db_url, echo=True)\ndef init_db():\n    SQLModel.metadata.create_all(engine)\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"lr1/practice_2/#modelspy-orm-","title":"models.py \u2014 ORM-\u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0441\u0432\u044f\u0437\u0438","text":"<pre><code>from enum import Enum\nfrom typing import Optional, List\nfrom sqlmodel import SQLModel, Field, Relationship\nclass RaceType(Enum):\n    director = \"director\"\n    worker = \"worker\"\n    junior = \"junior\"\nclass SkillWarriorLink(SQLModel, table=True):\n    skill_id: Optional[int] = Field(\n        default=None, foreign_key=\"skill.id\", primary_key=True\n    )\n    warrior_id: Optional[int] = Field(\n        default=None, foreign_key=\"warrior.id\", primary_key=True\n    )\nclass SkillBase(SQLModel):\n    name: str\n    description: Optional[str] = \"\"\nclass Skill(SkillBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    warriors: List[\"Warrior\"] = Relationship(back_populates=\"skills\", link_model=SkillWarriorLink)\nclass ProfessionBase(SQLModel):\n    title: str\n    description: str\nclass Profession(ProfessionBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    warriors_prof: List[\"Warrior\"] = Relationship(back_populates=\"profession\")\nclass WarriorBase(SQLModel):\n    race: RaceType\n    name: str\n    level: int\n    profession_id: Optional[int] = Field(default=None, foreign_key=\"profession.id\")\nclass Warrior(WarriorBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    profession: Optional[Profession] = Relationship(back_populates=\"warriors_prof\")\n    skills: Optional[List[Skill]] = Relationship(back_populates=\"warriors\", link_model=SkillWarriorLink)\nclass WarriorWithProfession(WarriorBase):\n    id: int\n    profession: Optional[Profession] = None\nclass WarriorWithFullDetails(WarriorWithProfession):\n    skills: List[Skill] = []\n</code></pre>"},{"location":"lr1/practice_2/#mainpy-fastapi-","title":"main.py \u2014 FastAPI-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b","text":"<pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom sqlmodel import Session, select\nfrom typing import List\nfrom connection import init_db, get_session\nfrom models import Warrior, WarriorBase, Profession, ProfessionBase, Skill, SkillBase, WarriorWithFullDetails\napp = FastAPI()\n@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n@app.get(\"/warriors\", response_model=List[WarriorWithFullDetails])\ndef read_warriors(session: Session = Depends(get_session)):\n    return session.exec(select(Warrior)).all()\n@app.get(\"/warrior/{warrior_id}\", response_model=WarriorWithFullDetails)\ndef read_warrior(warrior_id: int, session: Session = Depends(get_session)):\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n    return warrior\n@app.post(\"/warrior\", response_model=Warrior, status_code=201)\ndef create_warrior(warrior: Warrior, session: Session = Depends(get_session)):\n    session.add(warrior)\n    session.commit()\n    session.refresh(warrior)\n    return warrior\n@app.post(\"/warrior/{warrior_id}/add_skill/{skill_id}\")\ndef add_skill_to_warrior(warrior_id: int, skill_id: int, session: Session = Depends(get_session)):\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    if skill in warrior.skills:\n        raise HTTPException(status_code=400, detail=\"Skill is already linked to the warrior\")\n    warrior.skills.append(skill)\n    session.commit()\n    session.refresh(warrior)\n    return {\"status\": 200, \"message\": f\"Skill '{skill.name}' added to warrior '{warrior.name}'\"}\n@app.patch(\"/warrior/{warrior_id}\", response_model=Warrior)\ndef update_warrior(warrior_id: int, warrior_data: WarriorBase, session: Session = Depends(get_session)):\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n    update_data = warrior_data.model_dump(exclude_unset=True)\n    for field, val in update_data.items():\n        setattr(warrior, field, val)\n    session.add(warrior)\n    session.commit()\n    session.refresh(warrior)\n    return warrior\n@app.delete(\"/warrior/{warrior_id}\", status_code=204)\ndef delete_warrior(warrior_id: int, session: Session = Depends(get_session)):\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n    session.delete(warrior)\n    session.commit()\n@app.get(\"/professions\", response_model=List[Profession])\ndef read_professions(session: Session = Depends(get_session)):\n    return session.exec(select(Profession)).all()\n@app.get(\"/profession/{profession_id}\", response_model=Profession)\ndef read_profession(profession_id: int, session: Session = Depends(get_session)):\n    prof = session.get(Profession, profession_id)\n    if not prof:\n        raise HTTPException(status_code=404, detail=\"Profession not found\")\n    return prof\n@app.post(\"/profession\", response_model=Profession, status_code=201)\ndef create_profession(prof: Profession, session: Session = Depends(get_session)):\n    session.add(prof)\n    session.commit()\n    session.refresh(prof)\n    return prof\n@app.patch(\"/profession/{profession_id}\", response_model=Profession)\ndef update_profession(profession_id: int, prof_data: ProfessionBase, session: Session = Depends(get_session)):\n    prof = session.get(Profession, profession_id)\n    if not prof:\n        raise HTTPException(status_code=404, detail=\"Profession not found\")\n    update_data = prof_data.model_dump(exclude_unset=True)\n    for field, val in update_data.items():\n        setattr(prof, field, val)\n    session.add(prof)\n    session.commit()\n    session.refresh(prof)\n    return prof\n@app.delete(\"/profession/{profession_id}\", status_code=204)\ndef delete_profession(profession_id: int, session: Session = Depends(get_session)):\n    prof = session.get(Profession, profession_id)\n    if not prof:\n        raise HTTPException(status_code=404, detail=\"Profession not found\")\n    session.delete(prof)\n    session.commit()\n@app.get(\"/skills\", response_model=List[Skill])\ndef read_skills(session: Session = Depends(get_session)):\n    return session.exec(select(Skill)).all()\n@app.get(\"/skill/{skill_id}\", response_model=Skill)\ndef read_skill(skill_id: int, session: Session = Depends(get_session)):\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    return skill\n@app.post(\"/skill\", response_model=Skill, status_code=201)\ndef create_skill(skill: Skill, session: Session = Depends(get_session)):\n    session.add(skill)\n    session.commit()\n    session.refresh(skill)\n    return skill\n@app.patch(\"/skill/{skill_id}\", response_model=Skill)\ndef update_skill(skill_id: int, skill_data: SkillBase, session: Session = Depends(get_session)):\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    update_data = skill_data.model_dump(exclude_unset=True)\n    for field, val in update_data.items():\n        setattr(skill, field, val)\n    session.add(skill)\n    session.commit()\n    session.refresh(skill)\n    return skill\n@app.delete(\"/skill/{skill_id}\", status_code=204)\ndef delete_skill(skill_id: int, session: Session = Depends(get_session)):\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    session.delete(skill)\n    session.commit()\n</code></pre>"},{"location":"lr1/practice_3/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.3 \u2014 \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, ENV, GitIgnore \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":""},{"location":"lr1/practice_3/#gitignore","title":"\u0424\u0430\u0439\u043b .gitignore","text":"<pre><code>.idea\n.env\n.venv/\n__pycache__/\n*.py[cod]\n*.swp\n.idea/\n.vscode/\n.ipynb_checkpoints/\n*.log\n# vim temporary files\n*~\n.*.sw?\n.cache\n</code></pre>"},{"location":"lr1/practice_3/#connectionpy","title":"connection.py","text":"<pre><code>import os\nfrom dotenv import load_dotenv\nfrom sqlmodel import SQLModel, Session, create_engine\n# 1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 .env\nload_dotenv()\n# 2. \u0427\u0442\u0435\u043d\u0438\u0435 URL \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\nDB_URL = os.getenv(\"DB_ADMIN\")\nengine = create_engine(DB_URL, echo=True)\ndef init_db():\n    SQLModel.metadata.create_all(engine)\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"lr1/practice_3/#modelspy","title":"models.py","text":"<pre><code>from enum import Enum\nfrom typing import Optional, List\nfrom sqlmodel import SQLModel, Field, Relationship\nclass RaceType(Enum):\n    director = \"director\"\n    worker = \"worker\"\n    junior = \"junior\"\nclass SkillWarriorLink(SQLModel, table=True):\n    skill_id: Optional[int] = Field(\n        default=None, foreign_key=\"skill.id\", primary_key=True\n    )\n    warrior_id: Optional[int] = Field(\n        default=None, foreign_key=\"warrior.id\", primary_key=True\n    )\n    level: int | None\nclass SkillBase(SQLModel):\n    name: str\n    description: Optional[str] = \"\"\nclass Skill(SkillBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    warriors: List[\"Warrior\"] = Relationship(back_populates=\"skills\", link_model=SkillWarriorLink)\nclass ProfessionBase(SQLModel):\n    title: str\n    description: str\nclass Profession(ProfessionBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    warriors_prof: List[\"Warrior\"] = Relationship(back_populates=\"profession\")\nclass WarriorBase(SQLModel):\n    race: RaceType\n    name: str\n    level: int\n    profession_id: Optional[int] = Field(default=None, foreign_key=\"profession.id\")\nclass Warrior(WarriorBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    profession: Optional[Profession] = Relationship(back_populates=\"warriors_prof\")\n    skills: Optional[List[Skill]] = Relationship(back_populates=\"warriors\", link_model=SkillWarriorLink)\nclass WarriorWithProfession(WarriorBase):\n    id: int\n    profession: Optional[Profession] = None\nclass WarriorWithFullDetails(WarriorWithProfession):\n    skills: List[Skill] = []\n</code></pre>"},{"location":"lr1/practice_3/#_1","title":"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439","text":"<pre><code>alembic revision --autogenerate -m \"initial schema\"\nalembic upgrade head\nalembic revision --autogenerate -m \"add level to SkillWarriorLink\"\nalembic upgrade head\n</code></pre>"},{"location":"lr2/task1/","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c\u0430 \u043d\u0430 CPU \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0435","text":""},{"location":"lr2/task1/#_1","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0435\u0441\u0442\u0430 \u0431\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d \u043c\u0435\u0442\u043e\u0434 \u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 100.000.000. \u0414\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0431\u044b\u043b \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0451\u043d \u0437\u0430\u043c\u0435\u0440 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</p> <p>\u0414\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u044b \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 threading, \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0430 \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 multiprocessing \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 asyncio.</p> <p>\u0421 \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0449\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u044b\u043b \u0437\u0430\u0432\u0435\u0434\u0451\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0442\u043e\u043a\u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u043b\u0438 \u0441\u0432\u043e\u044e \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b.</p> <pre><code>from threading import Thread\nfrom time import time\n\ndef get_part_sum(start, end, result, index):\n    result[index] = sum(range(start, end))\n\nif __name__ == '__main__':\n    n = 1_000_000_00\n    threads_num = 10\n    result = [0 for _ in range(threads_num)]\n    chunk_size = n // threads_num\n\n    threads = []\n    start_time = time()\n    for i in range(threads_num):\n        start = i*chunk_size + 1\n        end = start + chunk_size\n        t = Thread(target=get_part_sum, args=(start, end, result, i))\n        threads.append(t)\n        t.start()\n\n    for t in threads:\n        t.join()\n\n    total = sum(result)\n    print(f\"{total} - \u0441\u0443\u043c\u043c\u0430\")\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n</code></pre> <p>\u0421 \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u043e\u043c \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u043f\u0443\u043b \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0432\u043e\u044e \u0441\u0443\u043c\u043c\u0443 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0451. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c.</p> <pre><code>from multiprocessing import Pool\nfrom time import time\n\ndef get_part_sum(start, end):\n    return sum(range(start, end))\n\nif __name__ == '__main__':\n    n = 1_000_000_00\n    process_num = 10\n    chunk_size = n // process_num\n    p = Pool(process_num)\n\n    payloads = []\n    for i in range(process_num):\n        start = i*chunk_size + 1\n        end = start + chunk_size\n        payloads.append((start, end))\n\n    start_time = time()\n    result = p.starmap(get_part_sum, payloads)\n\n    total = sum(result)\n    print(f\"{total} - \u0441\u0443\u043c\u043c\u0430\")\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n</code></pre> <p>\u0421 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c\u044e \u0442\u0430\u043a\u0436\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0437 \u0444\u0443\u043d\u043a\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0445.</p> <pre><code>import asyncio\nfrom time import time\n\nasync def get_part_sum(start, end):\n    return sum(range(start, end))\n\nasync def main():\n    n = 1_000_000_00\n    tasks_num = 10\n    result = [0 for _ in range(tasks_num)]\n    chunk_size = n // tasks_num\n\n    tasks = []\n    for i in range(tasks_num):\n        start = i*chunk_size + 1\n        end = start + chunk_size\n        tasks.append(get_part_sum(start, end))\n    start_time = time()\n\n    result = await asyncio.gather(*tasks)\n\n    total = sum(result)\n    print(f\"{total} - \u0441\u0443\u043c\u043c\u0430\")\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"lr2/task1/#_2","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430.</p> single thread threading multiprocessing asyncio 6.503\u0441. 7.665\u0441. 3.016\u0441. 6.659\u0441. <p>\u041c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0434\u0432\u0443\u043c\u044f \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430\u043c\u0438. \u042d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0443 \u043d\u0430\u0441 CPU-bound \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u0430 \u043f\u043e\u0442\u043e\u043a\u0438 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442\u0441\u044f GIL \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u043e\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043e\u0431\u0449\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c \u0438 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e.</p>"},{"location":"lr2/task2/","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c\u0430 \u043d\u0430 I/O \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0435","text":""},{"location":"lr2/task2/#_1","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0430\u0439\u0442\u043e\u0432 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0431\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0434\u0440\u0435\u0441\u043e\u0432, \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0445 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445</p> <pre><code>import requests\nimport random\nimport string\nimport aiohttp\nfrom models import *\nfrom db import get_session, get_async_session\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\n\n# \u043f\u0430\u0440\u0441\u0438\u043c \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u044b.\u0440\u0443\u0441\nHOST = \"https://feeds.tildacdn.com\"  # \u0441\u0430\u0439\u0442 \u0441\u0434\u0435\u043b\u0430\u043d \u043d\u0430 \u0442\u0438\u043b\u044c\u0434\u0435 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0438\u0437 \u0430\u043f\u0438 \u0442\u0438\u043b\u044c\u0434\u044b\nLIST_API_ENDPOINT = \"/api/getfeed/?feeduid=617755803461&amp;recid=488755787&amp;c={timestamp}&amp;size={size}&amp;slice={slice}\"\nSIZE = 20\nSLICE = 1\nUSER_AGENT = \"\".join(random.choices(string.ascii_letters, k=20))\nSESSION = requests.session()\nSESSION.headers[\"User-Agent\"] = USER_AGENT\n\ndef get_urls(size=SIZE, slice=SLICE):\n    now_timestamp = int(datetime.timestamp(datetime.now()) * 1000)\n    url = HOST + LIST_API_ENDPOINT.format(timestamp=now_timestamp, size=size, slice=slice)\n    hackathons_list = SESSION.get(url).json()[\"posts\"]\n    urls = [post[\"url\"] for post in hackathons_list if \"tpost\" in post[\"url\"]]\n    return urls\n\nasync def async_get_urls(size=SIZE, slice=SLICE):\n    session = aiohttp.ClientSession()\n    now_timestamp = int(datetime.timestamp(datetime.now()) * 1000)\n    url = HOST + LIST_API_ENDPOINT.format(timestamp=now_timestamp, size=size, slice=slice)\n    response = await session.get(url)\n    json_data = await response.json()\n    await session.close()\n    hackathons_list = json_data[\"posts\"]\n    urls = [post[\"url\"] for post in hackathons_list if \"tpost\" in post[\"url\"]]\n    return urls\n\ndef _fetch_data(url):\n    r = SESSION.get(url, headers={\"User-Agent\": USER_AGENT})\n    return r.text, r.status_code\n\nasync def _async_fetch_data(url):\n    timeout = aiohttp.ClientTimeout(10)\n    async with aiohttp.ClientSession(timeout=timeout) as session:\n        async with session.get(url, headers={\"User-Agent\": USER_AGENT}) as response:\n            response.raise_for_status()\n            return await response.text(), response.status\n\ndef _parse_html(data):\n    soup = BeautifulSoup(data, \"html.parser\")\n    dto = {\n        \"title\": None,\n        \"description\": None,\n        \"participant_conditions\": None,\n        \"location\": None,\n        \"dates\": None,\n        \"organizer_id\": 18  # \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u044e\u0437\u0435\u0440\n    }\n    dto[\"title\"] = soup.find(\"h1\", attrs={\"class\": \"js-feed-post-title t-feed__post-popup__title t-title t-title_xxs\"}).text.strip()\n    descr = soup.find(\"div\", attrs={\"class\": \"t-redactor__tte-view\"})\n    descr_blocks = descr.find_all(\"div\")\n    description = \"\"\n    for block in descr_blocks:\n        if \"\u0414\u0430\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f\" in block.text:\n            dto[\"dates\"] = block.text.split(\"\u0414\u0430\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f\")[1].split('\\n')[0].strip()\n        if \"\u041c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f\" in block.text:\n            dto[\"location\"] = block.text.split(\"\u041c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f:\")[1].split('\\n')[0].strip()\n        if \"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0434\u043e\" in block.text:\n            break\n        description += block.text + '\\n'\n    dto[\"description\"] = description\n    if not dto[\"location\"]:\n        dto[\"location\"] = \"\u041e\u043d\u043b\u0430\u0439\u043d\"\n\n    return dto\n\ndef _load_in_db(dto):\n    session = next(get_session())\n    data = HackathonDefault(\n        name=dto[\"title\"],\n        description=dto[\"description\"],\n        participant_conditions=dto[\"participant_conditions\"],\n        location=dto[\"location\"],\n        dates=dto[\"dates\"],\n        organizer_id=dto[\"organizer_id\"]\n    )\n    model = Hackathon.model_validate(data)\n    session.add(model)\n    session.commit()\n    session.refresh(model)\n\ndef fetch_parse_load(url):\n    data, status = _fetch_data(url)\n    if status == 404:\n        return False\n    data = _parse_html(data)\n    _load_in_db(data)\n    return True\n\nasync def async_fetch_parse_load(url):\n    data, status = await _async_fetch_data(url)\n    if status == 404:\n        return False\n    data = _parse_html(data)\n    _load_in_db(data)\n    return True\n</code></pre> <p>C \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u044d\u0442\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u044b\u043b \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0451\u043d \u0442\u0435\u0441\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432</p> <p>\u041c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c:</p> <pre><code>import threading\nfrom time import time\nfrom parser import fetch_parse_load, get_urls\n\nSIZE = 10\nSLICE = 3\n\ndef parse_and_load(url):\n    if fetch_parse_load(url):\n        print(f\"{url} - finished!\")\n    else:\n        print(f\"{url} - failed!\")\n\ndef main():\n    urls = get_urls(SIZE, SLICE)\n    threads = []\n    start_time = time()\n\n    for url in urls:\n        # print(f\"{url} - loading...\")\n        t = threading.Thread(target=parse_and_load, args=(url,))\n        threads.append(t)\n        t.start()\n\n    for t in threads:\n        t.join()\n\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> <p>\u041c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c:</p> <pre><code>from multiprocessing import Pool\nfrom time import time\nfrom parser import fetch_parse_load, get_urls\n\nSIZE = 10\nSLICE = 4\n\ndef parse_and_load(url):\n    if fetch_parse_load(url):\n        print(f\"{url} - finished!\")\n    else:\n        print(f\"{url} - failed!\")\n\ndef main():\n    urls = get_urls(SIZE, SLICE)\n    p = Pool(10)\n    start_time = time()\n\n    p.map(parse_and_load, urls)\n\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> <p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c</p> <pre><code>import asyncio\nfrom time import time\nfrom parser import async_get_urls, async_fetch_parse_load\n\nSIZE = 10\nSLICE = 5\n\nasync def parse_and_load(url):\n    if await async_fetch_parse_load(url):\n        print(f\"{url} - finished!\")\n    else:\n        print(f\"{url} - failed!\")\n\nasync def main():\n    urls = await async_get_urls(SIZE, SLICE)\n    tasks = []\n    start_time = time()\n\n    for url in urls:\n        tasks.append(parse_and_load(url))\n\n    await asyncio.gather(*tasks, return_exceptions=True)\n\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n</code></pre> <p>\u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u043f\u043e\u0442\u043e\u043a:</p> <pre><code>import threading\nfrom time import time\nfrom parser import fetch_parse_load, get_urls\n\nSIZE = 10\nSLICE = 6\n\ndef parse_and_load(url):\n    if fetch_parse_load(url):\n        print(f\"{url} - finished!\")\n    else:\n        print(f\"{url} - failed!\")\n\ndef main():\n    urls = get_urls(SIZE, SLICE)\n    start_time = time()\n\n    for url in urls:\n        parse_and_load(url)\n\n    print(f\"{time() - start_time}\u0441. - \u0432\u0440\u0435\u043c\u044f\")\n\nif __name__ == '__main__':\n    main()\n\n</code></pre>"},{"location":"lr2/task2/#_2","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432</p> single thread threading multiprocessing async 3.416c. 1.163\u0441. 11.712\u0441. 1.405\u0441. <p>\u041c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0438 I/O-bound \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438. \u0412 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0445\u0443\u0436\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 \u0438\u0437-\u0437\u0430 \u0437\u0430\u0442\u0440\u0430\u0442 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u0432\u044b\u0439\u0433\u0440\u044b\u0448\u0430 \u043f\u0440\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445.</p>"},{"location":"lr3/task1/","title":"\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker","text":""},{"location":"lr3/task1/#_1","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<ol> <li>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0434\u043e \u044d\u0442\u043e\u0433\u043e).</li> <li>\u0412\u043d\u0435\u0434\u0440\u0438\u0442\u044c \u0432\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</li> <li>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c 2 Dockerfile-\u0430 \u0434\u043b\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430\u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b.</li> <li>\u0421\u043e\u0437\u0434\u0430\u0442\u044c docker-compose \u0434\u043b\u044f \u0440\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439</li> </ol>"},{"location":"lr3/task1/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0411\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430. \u041a\u043e\u0434 \u043c\u0435\u0442\u043e\u0434\u0430 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d \u0438\u0437 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u043b\u0430\u0431\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</p> <pre><code>@app.post(\"/parse\")\ndef parse(size: int = Query(10, ge=1), slice: int = Query(1, ge=1)):\n    try:\n        response = requests.post(\n            f\"{PARSER_SERVICE_URL}/parse\",\n            params={\"size\": size, \"slice\": slice},\n            timeout=10\n        )\n        response.raise_for_status()\n        return {\"ok\": True, \"result\": response.json()}\n    except requests.exceptions.RequestException as e:\n        raise HTTPException(status_code=503, detail=f\"Parser service unavailable: {str(e)}\")\n\n</code></pre> <p>\u0414\u0430\u043b\u0435\u0435 \u043d\u0430\u0434\u043e \u0431\u044b\u043b\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b:</p> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435</p> <pre><code>FROM python:3.11\n\nWORKDIR /book_exchange\n\n# \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    postgresql-client \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# \u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439\nCOPY requirements.txt .\n\n# \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Python \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439\nRUN pip install --no-cache-dir -r requirements.txt\n\n# \u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430\nCOPY . .\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043b\u043e\u0433\u043e\u0432\nRUN mkdir -p /book_exchange/logs\n\n# \u041e\u0442\u043a\u0440\u044b\u0442\u0438\u0435 \u043f\u043e\u0440\u0442\u0430\nEXPOSE 8000\n\n# \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--reload\"]\n\n</code></pre> <p>\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430:</p> <pre><code>FROM python:3.11\n\n# \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438\nWORKDIR /parser\nCOPY requirements.txt .\n\nRUN pip install --no-cache-dir --upgrade pip \\\n    &amp;&amp; pip install --no-cache-dir -r requirements.txt\n\n# \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430\nCOPY . .\n\n# \u042d\u043a\u0441\u043f\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u0440\u0442 FastAPI\nEXPOSE 8000\n\n# \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 Uvicorn\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> <p>\u041b\u043e\u0433\u0438\u043a\u0430 Dockerfile \u043f\u0440\u043e\u0441\u0442\u0430\u044f - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e, \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0444\u0430\u0439\u043b\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0435\u0433\u043e.</p> <p>\u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0451\u0442 docker-compose</p> <pre><code>version: '3.8'\n\nservices:\n  # \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n  book_exchange_db:\n    image: postgres:latest\n    container_name: book_exchange_db\n    environment:\n      POSTGRES_DB: book_exchange\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    volumes:\n      - book_exchange_data:/var/lib/postgresql/data\n      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql\n    networks:\n      - app-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  # \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430\n  parser_db:\n    image: postgres:latest\n    container_name: parser_db\n    environment:\n      POSTGRES_DB: web_parsing\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    volumes:\n      - parser_data:/var/lib/postgresql/data\n      - ./init_parser_db.sql:/docker-entrypoint-initdb.d/init_parser_db.sql\n    networks:\n      - app-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  # FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 Book Exchange\n  book_exchange:\n    build: ./book_exchange\n    container_name: book_exchange\n    ports:\n      - \"8000:8000\"\n    environment:\n      DATABASE_URL: postgresql://postgres:postgres@book_exchange_db:5432/book_exchange\n      PARSER_DB_HOST: parser\n      PARSER_DB_NAME: web_parsing\n      PARSER_DB_USER: postgres\n      PARSER_DB_PASSWORD: postgres\n      SECRET_KEY: your-secret-key-here\n    depends_on:\n      book_exchange_db:\n        condition: service_healthy\n      parser:\n        condition: service_healthy\n    volumes:\n      - ./book_exchange:/app\n    networks:\n      - app-network\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f http://localhost:8000/health || exit 1\"]\n      interval: 5s\n      timeout: 3s\n      retries: 5\n\n  # FastAPI \u043f\u0430\u0440\u0441\u0435\u0440\n  parser:\n    build: ./parser\n    container_name: parser\n    ports:\n      - \"8001:8000\"\n    networks:\n      - app-network\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f http://localhost:8000/health || exit 1\"]\n      interval: 5s\n      timeout: 3s\n      retries: 5\n\nvolumes:\n  book_exchange_data:\n  parser_data:\n\nnetworks:\n  app-network:\n    driver: bridge\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u0438\u0434\u0435\u043c \u0432 docker desktop 4 \u0436\u0438\u0432\u044b\u0445 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0438 \u043e\u043d\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0441 localhost-\u0430.</p>"},{"location":"lr3/task2/","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI","text":""},{"location":"lr3/task2/#_1","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430</p>"},{"location":"lr3/task2/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u0442\u043e\u0436\u0435 FastAPI, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0441\u0442\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u0434\u043e \u043d\u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e http \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 requests \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043f\u0430\u0440\u0441\u0435\u0440\u0430.</p> <p>\u041c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430</p> <pre><code>@app.post(\"/parse_url\")\ndef parse_url(url: str = Query(..., description=\"URL to parse\")):\n    \"\"\"\n    \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e URL \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n    - title \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n    - \u0434\u043b\u0438\u043d\u0443 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\n    - \u043f\u0435\u0440\u0432\u044b\u0435 500 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 HTML\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to fetch URL: {str(e)}\")\n\n    content = response.text\n    soup = BeautifulSoup(content, \"lxml\")\n    title = soup.title.string if soup.title else \"No title\"\n\n    return {\n        \"ok\": True,\n        \"url\": url,\n        \"title\": title,\n        \"content_length\": len(content),\n        \"preview\": content[:500]\n    }\n\n</code></pre> <p>\u0417\u0434\u0435\u0441\u044c, \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0438\u0434\u0451\u0442 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 - \u0445\u043e\u0441\u0442 \u0432\u043e \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u0441\u0435\u0442\u0438 \u0434\u043e\u043a\u0435\u0440\u0430, \u0438 \u043f\u043e \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u043c\u0443 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c\u0443 \u043f\u043e\u0440\u0442\u0443.</p>"}]}