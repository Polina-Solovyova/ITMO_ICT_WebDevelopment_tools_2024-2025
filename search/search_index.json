{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"lr1/lab/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI","text":"<p>\u0422\u0435\u043c\u0430: \u0412\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438</p> <p>\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c SQLModel/SQLAlchemy, Alembic-\u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439, JWT-\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0432\u044f\u0437\u044f\u043c\u0438.</p>"},{"location":"lr1/lab/#_1","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f","text":"<p>\u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439</p> <pre><code>def hash_password(plain_password: str) -&gt; str:\n    return pwd_ctx.hash(plain_password)\ndef verify_password(plain_password: str, hashed_password: str) -&gt; bool:\n    return pwd_ctx.verify(plain_password, hashed_password)\n</code></pre> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f JWT</p> <pre><code>import jwt\nfrom datetime import datetime, timedelta\nfrom typing import Dict, Optional\ndef create_access_token(data: Dict[str, object], expires_delta: Optional[timedelta] = None) -&gt; str:\n    to_encode = data.copy()\n    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=settings.access_token_expire_minutes))\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, settings.jwt_secret, algorithm=settings.jwt_algorithm)\ndef decode_access_token(token: str) -&gt; Optional[Dict[str, object]]:\n    try:\n        return jwt.decode(token, settings.jwt_secret, algorithms=[settings.jwt_algorithm])\n    except jwt.PyJWTError:\n        return None\n</code></pre> <p>\u0412 \u043f\u043e\u043b\u0435\u0437\u043d\u0443\u044e \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 (data) \u043c\u044b \u043a\u043b\u0430\u0434\u0451\u043c {\"user_id\": profile.id}. exp \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u0430. \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430</p> <pre><code>router = APIRouter(prefix=\"/auth\", tags=[\"auth\"])\n@router.post(\"/register\", response_model=schemas.ProfileRead)\ndef register(reg: schemas.Register, db: Session = Depends(get_session)):\n    if crud.get_profile_by_email(db, reg.email):\n        raise HTTPException(status.HTTP_400_BAD_REQUEST, \"Email already registered\")\n    return crud.create_profile(db, reg)\n@router.post(\"/login\", response_model=schemas.Token)\ndef login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_session)):\n    prof = crud.authenticate_profile(db, form_data.username, form_data.password)\n    if not prof:\n        raise HTTPException(status.HTTP_401_UNAUTHORIZED, \"Invalid credentials\")\n    token = crud.create_access_token_for_user(prof)\n    return {\"access_token\": token, \"token_type\": \"bearer\"}\n</code></pre>"},{"location":"lr1/lab/#_2","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438</p> <ol> <li> <p>Profile \u2014 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p> </li> <li> <p>BookInfo \u2014 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043d\u0438\u0433\u0435 (title, author, genre, \u2026)</p> </li> <li> <p>Book \u2014 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p> </li> <li> <p>Tag \u2014 \u043c\u0435\u0442\u043a\u0438/\u0436\u0430\u043d\u0440\u044b \u0434\u043b\u044f BookInfo</p> </li> <li> <p>ShareRequest \u2014 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438</p> </li> </ol> <p>\u0410\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430</p> <pre><code>class BookTagLink(SQLModel, table=True):\n    info_id: Optional[int] = Field(\n        default=None, foreign_key=\"bookinfo.id\", primary_key=True\n    )\n    tag_id: Optional[int] = Field(\n        default=None, foreign_key=\"tag.id\", primary_key=True\n    )\n    added_at: datetime = Field(default_factory=datetime.utcnow)\n</code></pre>"},{"location":"lr1/lab/#crud-","title":"CRUD-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b","text":"<p>\u0422\u0435\u0433\u0438</p> <pre><code>POST /books/tags \u2014 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0442\u0435\u0433\nGET /books/tags \u2014 \u0441\u043f\u0438\u0441\u043e\u043a\nPATCH /books/tags/{id} \u2014 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c\nDELETE /books/tags/{id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c\n</code></pre> <p>\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043d\u0438\u0433\u0435</p> <pre><code>POST /books/info \u2014 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c BookInfo \u0441 tag_ids\nGET /books/info \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0442\u0435\u0433\u0430\u043c\u0438\nGET /books/info/{id} \u2014 \u043f\u043e id\nPATCH /books/info/{id} \u2014 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c + \u0441\u043c\u0435\u043d\u0430 \u0442\u0435\u0433\u043e\u0432\nDELETE /books/info/{id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c\n</code></pre> <p>\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043a\u043d\u0438\u0433</p> <pre><code>POST /books/ \u2014 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0432 \u0441\u0432\u043e\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443\nGET /books/ \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438 title, author, tag_id\nGET /books/{id} \u2014 \u043f\u043e id\nPATCH /books/{id} \u2014 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0430\u0442\u044b\nDELETE /books/{id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d</p> <pre><code>POST /share-requests/ \u2014 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\nGET /share-requests/incoming \u2014 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435\nGET /share-requests/outgoing \u2014 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435\nPOST /share-requests/{id}/respond \u2014 \u043f\u0440\u0438\u043d\u044f\u0442\u044c/\u043e\u0442\u043a\u043b\u043e\u043d\u0438\u0442\u044c\nDELETE /share-requests/{id} \u2014 \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\n</code></pre> <p>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438</p> <pre><code>GET /users/me \u2014 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c\nGET /users/ \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439\nGET /users/{id} \u2014 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e id\nPATCH /users/me \u2014 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u043f\u0440\u043e\u0444\u0438\u043b\u044c\nPATCH /users/change-password \u2014 \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c\n</code></pre> <p>\u0412\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b, \u043a\u0440\u043e\u043c\u0435 /auth, \u0437\u0430\u0449\u0438\u0449\u0435\u043d\u044b JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u043c \u0447\u0435\u0440\u0435\u0437 Depends(ReusableOAuth2).</p>"},{"location":"lr1/lab/#alembic","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 Alembic","text":"<p>\u0412 alembic/env.py \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e:</p> <pre><code>from sqlmodel import SQLModel\nfrom app.models.models import *\ntarget_metadata = SQLModel.metadata \n</code></pre>"},{"location":"lr1/practice_1/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.1 \u2014 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 FastAPI","text":""},{"location":"lr1/practice_1/#_1","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>Warrior</p> <pre><code>class Warrior(BaseModel):\n    id: int\n    race: RaceType\n    name: str\n    level: int\n    profession: Profession\n    skills: Optional[List[Skill]] = []\n</code></pre> <p>Profession </p> <pre><code>class Profession(BaseModel):\n    id: int\n    title: str\n    description: str\n</code></pre> <p>Skill </p> <pre><code>class Skill(BaseModel):\n    id: int\n    name: str\n    description: str\n</code></pre> <p>RaceType</p> <pre><code>class RaceType(str, Enum):\n    director = \"director\"\n    worker   = \"worker\"\n    junior   = \"junior\"\n</code></pre>"},{"location":"lr1/practice_1/#api-endpoints","title":"API Endpoints","text":"<p>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430\u043c\u0438</p> <pre><code>GET /warriors_list - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0438\u043d\u043e\u0432\nGET /warrior/{warrior_id} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0432\u043e\u0438\u043d\u0435\nPOST /warrior - \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0432\u043e\u0438\u043d\u0430\nPUT /warrior{warrior_id} - \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u043e\u0438\u043d\u0435\nDELETE /warrior/delete{warrior_id} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u043e\u0438\u043d\u0430\n</code></pre> <p>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u043c\u0438</p> <pre><code>GET /professions - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439\nGET /profession/{profession_id} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438\nPOST /profession - \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e\nPUT /profession/{profession_id} - \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438\nDELETE /profession/{profession_id} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e\n</code></pre>"},{"location":"lr1/practice_1/#_2","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434","text":"<p>main.py</p> <pre><code>from fastapi import FastAPI, HTTPException\nfrom typing import List\nfrom models import Warrior, Profession, Skill, RaceType\napp = FastAPI()\ntemp_warriors = [\n{\n    \"id\": 1,\n    \"race\": RaceType.director,\n    \"name\": \"\u041c\u0430\u0440\u0442\u044b\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439\",\n    \"level\": 12,\n    \"profession\": {\n        \"id\": 1,\n        \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\",\n        \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\"\n    },\n    \"skills\":\n        [{\n            \"id\": 1,\n            \"name\": \"\u041a\u0443\u043f\u043b\u0435-\u043f\u0440\u043e\u0434\u0430\u0436\u0430 \u043a\u043e\u043c\u043f\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432\",\n            \"description\": \"\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\",\n            \"description\": \"\"\n        }]\n},\n{\n    \"id\": 2,\n    \"race\": RaceType.worker,\n    \"name\": \"\u0410\u043d\u0434\u0440\u0435\u0439 \u041a\u043e\u0441\u044f\u043a\u0438\u043d\",\n    \"level\": 12,\n    \"profession\": {\n        \"id\": 1,\n        \"title\": \"\u0414\u0435\u043b\u044c\u0444\u0438\u0441\u0442-\u0433\u0440\u0435\u0431\u0435\u0446\",\n        \"description\": \"\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\"\n    },\n    \"skills\": []\n},\n]\ntemp_professions = [\n    {\"id\": 1, \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\", \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\"},\n    {\"id\": 2, \"title\": \"\u0414\u0435\u043b\u044c\u0444\u0438\u0441\u0442-\u0433\u0440\u0435\u0431\u0435\u0446\", \"description\": \"\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\"},\n]\n@app.get(\"/warriors_list\", response_model=List[Warrior])\ndef warriors_list():\n    return temp_warriors\n@app.get(\"/warrior/{warrior_id}\", response_model=Warrior)\ndef warrior_get(warrior_id: int):\n    for w in temp_warriors:\n        if w[\"id\"] == warrior_id:\n            return w\n    raise HTTPException(status_code=404, detail=\"Warrior not found\")\n@app.post(\"/warrior\", response_model=Warrior, status_code=201)\ndef warrior_create(warrior: Warrior):\n    temp_warriors.append(warrior.dict())\n    return warrior\n@app.put(\"/warrior/{warrior_id}\", response_model=Warrior)\ndef warrior_update(warrior_id: int, warrior: Warrior):\n    for idx, w in enumerate(temp_warriors):\n        if w[\"id\"] == warrior_id:\n            temp_warriors[idx] = warrior.dict()\n            return warrior\n    raise HTTPException(status_code=404, detail=\"Warrior not found\")\n@app.delete(\"/warrior/{warrior_id}\", status_code=204)\ndef warrior_delete(warrior_id: int):\n    for idx, w in enumerate(temp_warriors):\n        if w[\"id\"] == warrior_id:\n            temp_warriors.pop(idx)\n            return\n    raise HTTPException(status_code=404, detail=\"Warrior not found\")\n@app.get(\"/professions\", response_model=List[Profession])\ndef professions_list():\n    return temp_professions\n@app.get(\"/profession/{prof_id}\", response_model=Profession)\ndef profession_get(prof_id: int):\n    for p in temp_professions:\n        if p[\"id\"] == prof_id:\n            return p\n    raise HTTPException(status_code=404, detail=\"Profession not found\")\n@app.post(\"/profession\", response_model=Profession, status_code=201)\ndef profession_create(prof: Profession):\n    temp_professions.append(prof.dict())\n    return prof\n@app.put(\"/profession/{prof_id}\", response_model=Profession)\ndef profession_update(prof_id: int, prof: Profession):\n    for idx, p in enumerate(temp_professions):\n        if p[\"id\"] == prof_id:\n            temp_professions[idx] = prof.dict()\n            return prof\n    raise HTTPException(status_code=404, detail=\"Profession not found\")\n@app.delete(\"/profession/{prof_id}\", status_code=204)\ndef profession_delete(prof_id: int):\n    for idx, p in enumerate(temp_professions):\n        if p[\"id\"] == prof_id:\n            temp_professions.pop(idx)\n            return\n    raise HTTPException(status_code=404, detail=\"Profession not found\")\n</code></pre>"},{"location":"lr1/practice_2/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.2 \u2014 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0411\u0414, SQLModel \u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 Alembic","text":""},{"location":"lr1/practice_2/#connectionpy","title":"connection.py \u2014 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414","text":"<pre><code>from sqlmodel import SQLModel, Session, create_engine\ndb_url = 'postgresql://postgres:galactus@localhost/warriors_db'\nengine = create_engine(db_url, echo=True)\ndef init_db():\n    SQLModel.metadata.create_all(engine)\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"lr1/practice_2/#modelspy-orm-","title":"models.py \u2014 ORM-\u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0441\u0432\u044f\u0437\u0438","text":"<pre><code>from enum import Enum\nfrom typing import Optional, List\nfrom sqlmodel import SQLModel, Field, Relationship\nclass RaceType(Enum):\n    director = \"director\"\n    worker = \"worker\"\n    junior = \"junior\"\nclass SkillWarriorLink(SQLModel, table=True):\n    skill_id: Optional[int] = Field(\n        default=None, foreign_key=\"skill.id\", primary_key=True\n    )\n    warrior_id: Optional[int] = Field(\n        default=None, foreign_key=\"warrior.id\", primary_key=True\n    )\nclass SkillBase(SQLModel):\n    name: str\n    description: Optional[str] = \"\"\nclass Skill(SkillBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    warriors: List[\"Warrior\"] = Relationship(back_populates=\"skills\", link_model=SkillWarriorLink)\nclass ProfessionBase(SQLModel):\n    title: str\n    description: str\nclass Profession(ProfessionBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    warriors_prof: List[\"Warrior\"] = Relationship(back_populates=\"profession\")\nclass WarriorBase(SQLModel):\n    race: RaceType\n    name: str\n    level: int\n    profession_id: Optional[int] = Field(default=None, foreign_key=\"profession.id\")\nclass Warrior(WarriorBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    profession: Optional[Profession] = Relationship(back_populates=\"warriors_prof\")\n    skills: Optional[List[Skill]] = Relationship(back_populates=\"warriors\", link_model=SkillWarriorLink)\nclass WarriorWithProfession(WarriorBase):\n    id: int\n    profession: Optional[Profession] = None\nclass WarriorWithFullDetails(WarriorWithProfession):\n    skills: List[Skill] = []\n</code></pre>"},{"location":"lr1/practice_2/#mainpy-fastapi-","title":"main.py \u2014 FastAPI-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b","text":"<pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom sqlmodel import Session, select\nfrom typing import List\nfrom connection import init_db, get_session\nfrom models import Warrior, WarriorBase, Profession, ProfessionBase, Skill, SkillBase, WarriorWithFullDetails\napp = FastAPI()\n@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n@app.get(\"/warriors\", response_model=List[WarriorWithFullDetails])\ndef read_warriors(session: Session = Depends(get_session)):\n    return session.exec(select(Warrior)).all()\n@app.get(\"/warrior/{warrior_id}\", response_model=WarriorWithFullDetails)\ndef read_warrior(warrior_id: int, session: Session = Depends(get_session)):\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n    return warrior\n@app.post(\"/warrior\", response_model=Warrior, status_code=201)\ndef create_warrior(warrior: Warrior, session: Session = Depends(get_session)):\n    session.add(warrior)\n    session.commit()\n    session.refresh(warrior)\n    return warrior\n@app.post(\"/warrior/{warrior_id}/add_skill/{skill_id}\")\ndef add_skill_to_warrior(warrior_id: int, skill_id: int, session: Session = Depends(get_session)):\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    if skill in warrior.skills:\n        raise HTTPException(status_code=400, detail=\"Skill is already linked to the warrior\")\n    warrior.skills.append(skill)\n    session.commit()\n    session.refresh(warrior)\n    return {\"status\": 200, \"message\": f\"Skill '{skill.name}' added to warrior '{warrior.name}'\"}\n@app.patch(\"/warrior/{warrior_id}\", response_model=Warrior)\ndef update_warrior(warrior_id: int, warrior_data: WarriorBase, session: Session = Depends(get_session)):\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n    update_data = warrior_data.model_dump(exclude_unset=True)\n    for field, val in update_data.items():\n        setattr(warrior, field, val)\n    session.add(warrior)\n    session.commit()\n    session.refresh(warrior)\n    return warrior\n@app.delete(\"/warrior/{warrior_id}\", status_code=204)\ndef delete_warrior(warrior_id: int, session: Session = Depends(get_session)):\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n    session.delete(warrior)\n    session.commit()\n@app.get(\"/professions\", response_model=List[Profession])\ndef read_professions(session: Session = Depends(get_session)):\n    return session.exec(select(Profession)).all()\n@app.get(\"/profession/{profession_id}\", response_model=Profession)\ndef read_profession(profession_id: int, session: Session = Depends(get_session)):\n    prof = session.get(Profession, profession_id)\n    if not prof:\n        raise HTTPException(status_code=404, detail=\"Profession not found\")\n    return prof\n@app.post(\"/profession\", response_model=Profession, status_code=201)\ndef create_profession(prof: Profession, session: Session = Depends(get_session)):\n    session.add(prof)\n    session.commit()\n    session.refresh(prof)\n    return prof\n@app.patch(\"/profession/{profession_id}\", response_model=Profession)\ndef update_profession(profession_id: int, prof_data: ProfessionBase, session: Session = Depends(get_session)):\n    prof = session.get(Profession, profession_id)\n    if not prof:\n        raise HTTPException(status_code=404, detail=\"Profession not found\")\n    update_data = prof_data.model_dump(exclude_unset=True)\n    for field, val in update_data.items():\n        setattr(prof, field, val)\n    session.add(prof)\n    session.commit()\n    session.refresh(prof)\n    return prof\n@app.delete(\"/profession/{profession_id}\", status_code=204)\ndef delete_profession(profession_id: int, session: Session = Depends(get_session)):\n    prof = session.get(Profession, profession_id)\n    if not prof:\n        raise HTTPException(status_code=404, detail=\"Profession not found\")\n    session.delete(prof)\n    session.commit()\n@app.get(\"/skills\", response_model=List[Skill])\ndef read_skills(session: Session = Depends(get_session)):\n    return session.exec(select(Skill)).all()\n@app.get(\"/skill/{skill_id}\", response_model=Skill)\ndef read_skill(skill_id: int, session: Session = Depends(get_session)):\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    return skill\n@app.post(\"/skill\", response_model=Skill, status_code=201)\ndef create_skill(skill: Skill, session: Session = Depends(get_session)):\n    session.add(skill)\n    session.commit()\n    session.refresh(skill)\n    return skill\n@app.patch(\"/skill/{skill_id}\", response_model=Skill)\ndef update_skill(skill_id: int, skill_data: SkillBase, session: Session = Depends(get_session)):\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    update_data = skill_data.model_dump(exclude_unset=True)\n    for field, val in update_data.items():\n        setattr(skill, field, val)\n    session.add(skill)\n    session.commit()\n    session.refresh(skill)\n    return skill\n@app.delete(\"/skill/{skill_id}\", status_code=204)\ndef delete_skill(skill_id: int, session: Session = Depends(get_session)):\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    session.delete(skill)\n    session.commit()\n</code></pre>"},{"location":"lr1/practice_3/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.3 \u2014 \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, ENV, GitIgnore \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":""},{"location":"lr1/practice_3/#gitignore","title":"\u0424\u0430\u0439\u043b .gitignore","text":"<pre><code>.idea\n.env\n.venv/\n__pycache__/\n*.py[cod]\n*.swp\n.idea/\n.vscode/\n.ipynb_checkpoints/\n*.log\n# vim temporary files\n*~\n.*.sw?\n.cache\n</code></pre>"},{"location":"lr1/practice_3/#connectionpy","title":"connection.py","text":"<pre><code>import os\nfrom dotenv import load_dotenv\nfrom sqlmodel import SQLModel, Session, create_engine\n# 1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 .env\nload_dotenv()\n# 2. \u0427\u0442\u0435\u043d\u0438\u0435 URL \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\nDB_URL = os.getenv(\"DB_ADMIN\")\nengine = create_engine(DB_URL, echo=True)\ndef init_db():\n    SQLModel.metadata.create_all(engine)\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"lr1/practice_3/#modelspy","title":"models.py","text":"<pre><code>from enum import Enum\nfrom typing import Optional, List\nfrom sqlmodel import SQLModel, Field, Relationship\nclass RaceType(Enum):\n    director = \"director\"\n    worker = \"worker\"\n    junior = \"junior\"\nclass SkillWarriorLink(SQLModel, table=True):\n    skill_id: Optional[int] = Field(\n        default=None, foreign_key=\"skill.id\", primary_key=True\n    )\n    warrior_id: Optional[int] = Field(\n        default=None, foreign_key=\"warrior.id\", primary_key=True\n    )\n    level: int | None\nclass SkillBase(SQLModel):\n    name: str\n    description: Optional[str] = \"\"\nclass Skill(SkillBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    warriors: List[\"Warrior\"] = Relationship(back_populates=\"skills\", link_model=SkillWarriorLink)\nclass ProfessionBase(SQLModel):\n    title: str\n    description: str\nclass Profession(ProfessionBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    warriors_prof: List[\"Warrior\"] = Relationship(back_populates=\"profession\")\nclass WarriorBase(SQLModel):\n    race: RaceType\n    name: str\n    level: int\n    profession_id: Optional[int] = Field(default=None, foreign_key=\"profession.id\")\nclass Warrior(WarriorBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    profession: Optional[Profession] = Relationship(back_populates=\"warriors_prof\")\n    skills: Optional[List[Skill]] = Relationship(back_populates=\"warriors\", link_model=SkillWarriorLink)\nclass WarriorWithProfession(WarriorBase):\n    id: int\n    profession: Optional[Profession] = None\nclass WarriorWithFullDetails(WarriorWithProfession):\n    skills: List[Skill] = []\n</code></pre>"},{"location":"lr1/practice_3/#_1","title":"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439","text":"<pre><code>alembic revision --autogenerate -m \"initial schema\"\nalembic upgrade head\nalembic revision --autogenerate -m \"add level to SkillWarriorLink\"\nalembic upgrade head\n</code></pre>"}]}